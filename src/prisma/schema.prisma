generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["fullTextSearch", "views"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model Settings {
  onlyTrueAsId                          Boolean   @id @default(true) // This is to guarantee 1 row in the table (not perfect since we didn't succeed setting a constraint with Prisma, but that's acceptable if fetching with the right condition)
  llmBotAssistantId                     String?
  llmAnalyzerAssistantId                String?
  initiativesBotAssistantFileIds        String[]
  initiativesBotAssistantFilesUpdatedAt DateTime?
  updateIngestedInitiatives             Boolean   @default(false)
  toolsAnalyzerAssistantFileId          String?
  toolsAnalyzerAssistantFileUpdatedAt   DateTime?
  updateIngestedTools                   Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model InitiativeLlmDocument {
  id           String                 @id @default(cuid())
  initiativeId String                 @unique @db.Uuid
  content      String
  vector       Unsupported("vector")?

  initiative Initiative @relation(fields: [initiativeId], references: [id], onDelete: Cascade)

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  calculatedAt DateTime?
}

model ToolLlmDocument {
  id      String                 @id @default(cuid())
  toolId  String                 @unique @db.Uuid
  content String
  vector  Unsupported("vector")?

  tool Tool @relation(fields: [toolId], references: [id], onDelete: Cascade)

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  calculatedAt DateTime?
}

enum RawRepositoryPlatform {
  GITHUB
  GITLAB
}

model RawRepository {
  // Note we couldn't make a constraint `@@unique([platform, organizationName, name])` because GitLab can manage subgroups which are not reflected in those three, so using the repository URL
  id                     String                @id @default(uuid()) @db.Uuid
  name                   String
  organizationName       String
  platform               RawRepositoryPlatform
  repositoryUrl          String                @unique
  description            String?               @db.Text
  defaultBranch          String
  isFork                 Boolean?
  isArchived             Boolean
  creationDate           DateTime
  lastUpdate             DateTime
  lastModification       DateTime
  homepage               String?
  starsCount             Int
  forksCount             Int
  license                String?
  openIssuesCount        Int
  language               String?
  topics                 String? // Format `aaa,bbb,ccc`
  softwareHeritageExists Boolean?
  softwareHeritageUrl    String?

  repositoryDomain String

  probableWebsiteUrl     String?
  probableWebsiteDomain  String?
  updateInferredMetadata Boolean @default(true)

  mainSimilarRepositoryId     String? @db.Uuid
  updateMainSimilarRepository Boolean @default(true)

  lastUpdateAttemptWithReachabilityError DateTime?
  lastUpdateAttemptReachabilityError     String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  mainSimilarRepository           RawRepository?                   @relation("SimilarRepositories", fields: [mainSimilarRepositoryId], references: [id], onDelete: SetNull)
  similarRepositories             RawRepository[]                  @relation("SimilarRepositories")
  RawRepositoriesOnInitiativeMaps RawRepositoriesOnInitiativeMaps?
}

enum RawDomainType {
  COMMUNE
  PUBLIC_INTERCOMMUNAL_COOPERATION_ESTABLISHMENT
  COLLECTIVITY
  REGIONAL_COUNCIL
  LIBRARY
  MANAGEMENT_CENTER
  EDUCATIONAL_INSTITUTION
  DEPARTMENTAL_COUNCIL
  UNIVERSITY
  EMBASSY
  ACADEMY
  DEPARTMENTAL_AUTONOMY_HOUSE
  HOSPITAL
  GOVERNMENT
  PREFECTURE
  HEALTH
}

model RawDomain {
  id      String         @id @default(uuid()) @db.Uuid
  name    String         @unique // Domain name format (e.g. `www.example.com`)
  siren   String
  type    RawDomainType?
  sources String

  redirectDomainTargetName String?
  redirectDomainTargetId   String? @unique @db.Uuid

  indexableFromRobotsTxt       Boolean?
  updateIndexableFromRobotsTxt Boolean  @default(true)
  robotsTxtContent             String?

  wildcardCertificate       Boolean?
  updateWildcardCertificate Boolean  @default(true)
  certificateContent        String?

  websiteRawContent        String?  @db.Text
  websiteTitle             String?  @db.Text
  websiteAnotherPageTitle  String?  @db.Text
  websiteInferredName      String?  @db.Text
  websiteHasContent        Boolean?
  websiteHasStyle          Boolean?
  websiteContentIndexable  Boolean?
  websitePseudoFingerprint String?
  probableRepositoryUrl    String?
  probableRepositoryDomain String?
  updateWebsiteData        Boolean  @default(true)

  mainSimilarDomainId     String? @db.Uuid
  updateMainSimilarDomain Boolean @default(true)

  lastUpdateAttemptWithReachabilityError DateTime?
  lastUpdateAttemptReachabilityError     String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  redirectDomainTarget       RawDomain?                  @relation("RedirectDomains", fields: [redirectDomainTargetId], references: [id], onDelete: SetNull)
  redirectDomainOrigins      RawDomain[]                 @relation("RedirectDomains")
  mainSimilarDomain          RawDomain?                  @relation("SimilarDomains", fields: [mainSimilarDomainId], references: [id], onDelete: SetNull)
  similarDomains             RawDomain[]                 @relation("SimilarDomains")
  RawDomainsOnInitiativeMaps RawDomainsOnInitiativeMaps?
}

model Organization {
  id                   String   @id @default(uuid()) @db.Uuid
  parentOrganizationId String?  @db.Uuid
  level                Int
  dilaId               String   @unique @db.Uuid
  name                 String
  domains              String[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  parentOrganization                     Organization?                            @relation("ParentChildren", fields: [parentOrganizationId], references: [id], onDelete: SetNull)
  childrenOrganizations                  Organization[]                           @relation("ParentChildren")
  RepositoryOrganizationsOnOrganizations RepositoryOrganizationsOnOrganizations[]
  OrganizationsOnInitiatives             OrganizationsOnInitiatives[]
}

model RepositoryOrganizationsOnOrganizations {
  repositoryOrganizationId String @db.Uuid
  organizationId           String @db.Uuid

  repositoryOrganization RepositoryOrganization @relation(fields: [repositoryOrganizationId], references: [id], onDelete: Cascade)
  organization           Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([repositoryOrganizationId, organizationId])
}

model RepositoryOrganization {
  id       String   @id @default(uuid()) @db.Uuid
  url      String   @unique
  entities String[]

  relatedDomains       String[]
  updateRelatedDomains Boolean  @default(true)

  updateRelatedOrganizations Boolean @default(true)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  RepositoryOrganizationsOnOrganizations RepositoryOrganizationsOnOrganizations[]
}

enum ToolCategory {
  LANGUAGES_AND_FRAMEWORKS
  BUILD_TEST_DEPLOY
  LIBRARIES
  DATA_STORES
  COLLABORATION
  BACK_OFFICE
  ANALYTICS
  APPLICATION_HOSTING
  APPLICATION_UTILITIES
  ASSETS_AND_MEDIA
  SUPPORT_SALES_AND_MARKETING
  DESIGN
  MONITORING
  PAYMENTS
  COMMUNICATIONS
  MOBILE
}

model Tool {
  id          String       @id @default(uuid()) @db.Uuid
  name        String       @unique
  title       String?
  description String?
  category    ToolCategory

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  ToolsOnInitiatives ToolsOnInitiatives[]
  ToolLlmDocument    ToolLlmDocument?
}

model BusinessUseCase {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  BusinessUseCasesOnInitiatives BusinessUseCasesOnInitiatives[]
}

enum FunctionalUseCase {
  HAS_VIRTUAL_EMAIL_INBOXES
  SENDS_EMAILS
  SENDS_PUSH_NOTIFICATIONS
  GENERATES_PDF
  GENERATES_SPREADSHEET_FILE
  HAS_SEARCH_SYSTEM
  HAS_AUTHENTICATION_SYSTEM
  PROVIDES_TWO_FACTOR_AUTHENTICATION
  MANAGES_FILE_UPLOAD
  HAS_PAYMENT_SYSTEM
  HAS_SEVERAL_LANGUAGES_AVAILABLE
  REPORTS_ANALYTICS
  REPORTS_ERRORS
  DISPLAYS_CARTOGRAPHY_MAP
  USES_ARTIFICIAL_INTELLIGENCE
  EXPOSES_API_ENDPOINTS
}

model ToolsOnInitiatives {
  toolId       String @db.Uuid
  initiativeId String @db.Uuid

  tool       Tool       @relation(fields: [toolId], references: [id], onDelete: Cascade)
  initiative Initiative @relation(fields: [initiativeId], references: [id], onDelete: Cascade)

  @@id([toolId, initiativeId])
}

model BusinessUseCasesOnInitiatives {
  businessUseCaseId String @db.Uuid
  initiativeId      String @db.Uuid

  businessUseCase BusinessUseCase @relation(fields: [businessUseCaseId], references: [id], onDelete: Cascade)
  initiative      Initiative      @relation(fields: [initiativeId], references: [id], onDelete: Cascade)

  @@id([businessUseCaseId, initiativeId])
}

model RawDomainsOnInitiativeMaps {
  rawDomainId     String  @unique @db.Uuid
  initiativeMapId String  @db.Uuid
  main            Boolean

  rawDomain  RawDomain     @relation(fields: [rawDomainId], references: [id], onDelete: Cascade)
  initiative InitiativeMap @relation(fields: [initiativeMapId], references: [id], onDelete: Cascade)

  @@id([rawDomainId, initiativeMapId])
}

model RawRepositoriesOnInitiativeMaps {
  rawRepositoryId String  @unique @db.Uuid
  initiativeMapId String  @db.Uuid
  main            Boolean

  rawRepository RawRepository @relation(fields: [rawRepositoryId], references: [id], onDelete: Cascade)
  initiative    InitiativeMap @relation(fields: [initiativeMapId], references: [id], onDelete: Cascade)

  @@id([rawRepositoryId, initiativeMapId])
}

model InitiativeMap {
  id                                     String    @id @default(uuid()) @db.Uuid
  mainItemIdentifier                     String    @db.Uuid // We can rely on it because we always keep only 1 top parent item in the graph for each group
  update                                 Boolean
  lastUpdateAttemptWithReachabilityError DateTime?
  lastUpdateAttemptReachabilityError     String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  Initiative                      Initiative?
  RawDomainsOnInitiativeMaps      RawDomainsOnInitiativeMaps[]
  RawRepositoriesOnInitiativeMaps RawRepositoriesOnInitiativeMaps[]
}

model OrganizationsOnInitiatives {
  organizationId String @db.Uuid
  initiativeId   String @db.Uuid

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  initiative   Initiative   @relation(fields: [initiativeId], references: [id], onDelete: Cascade)

  @@id([organizationId, initiativeId])
}

model Initiative {
  id                 String              @id @default(uuid()) @db.Uuid
  originId           String?             @unique @db.Uuid
  name               String
  description        String
  websites           String[]
  repositories       String[]
  functionalUseCases FunctionalUseCase[]

  updateOrganizations Boolean @default(true)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  origin                        InitiativeMap?                  @relation(fields: [originId], references: [id], onDelete: SetNull)
  ToolsOnInitiatives            ToolsOnInitiatives[]
  BusinessUseCasesOnInitiatives BusinessUseCasesOnInitiatives[]
  InitiativeLlmDocument         InitiativeLlmDocument?
  OrganizationsOnInitiatives    OrganizationsOnInitiatives[]
}
